// 1. a) Write a constructor for the class Movie, which takes a String representing the title of the movie, 
// a String representing the studio, and a String representing the rating as its arguments, and sets the 
// respective class properties to these values.

class movie {
  constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }

  getrating() {
    return "the rating is  " + this.rating;
  }
}


// b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.
 
class movie {
    constructor(title, studio, rating){
        this.title = title;
        this.studio = studio;
        this.rating = "PG";
    }
}

// d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”,
// the studio “Eon Productions”, and the rating “PG­13”

const CasinoRoyale = new movie( "Casino Royal", "Eon Productions", "PG13");



function Person() {
            this.firstName = "vallathan";
            this.lastName = "adhi";
            this.getFullName = function(){
                return this.firstName + " " + this.lastName;
            }
        };

var person1 = new Person();
person1.firstName = "vallathan";
person1.lastName = "adhi";

alert(person1.getFullName());
     
var person2 = new Person();
person2.firstName = "vallathan";
person2.lastName = "adhi";

alert(person2.getFullName());



(function($){
	var currentCur = 'MYR';
	var tripsTable = $('#trips-table');
	var fareColHeader = tripsTable.find('thead tr th:nth-child(4)');
	var fareColHeaderSum = fareColHeader.find('.af-faresum');
	if ( fareColHeaderSum.length === 0 ){
		fareColHeaderSum = $('<span class="af-faresum">(<span class="af-faresumval">' + currentCur +'0.00</span>)</span>');
	}
	fareColHeader.append(fareColHeaderSum);
	var fareCol = tripsTable.find('tbody tr td:nth-child(4)');
	var convertCurrencyToNumber = function(value, currency){
		if ( typeof value !== 'string' ){
			return 0.00;
		}
		if ( typeof currency === 'undefined' || currency === '' ){
			currency = 'MYR';
		}
		value = value.trim();
		if ( value === currency + 'NaN' ){
			return 0.00;
		}
		return parseFloat(value.replace(currency, '' ));
	};
	fareCol.each(function(item, i){
		var elem = $(this);
		var checkbox = elem.children('.af-checkwrapper');
		if ( checkbox.length === 0 ){
			checkbox = $('<div class="af-checkwrapper"><input type="checkbox" /></div>');
			elem.append(checkbox);
		}
	}).promise().done(function(){
		tripsTable.off('change', '.af-checkwrapper input'); 
		tripsTable.on('change', '.af-checkwrapper input', function(){
			var elem = $(this);
			var elemTd = elem.closest('td');
			var itemText = elemTd.text();
			var itemVal = convertCurrencyToNumber(itemText);
			var currentSumDom = fareColHeaderSum.find('.af-faresumval');
			var currentSumText = currentSumDom.text();
			var currentSumVal = convertCurrencyToNumber(currentSumText);
			if ( elem.prop('checked') ){
				currentSumVal = currentSumVal + itemVal;
			} else {
				currentSumVal = currentSumVal - itemVal;
            }
			currentSumDom.text(currentCur + Number(currentSumVal).toFixed(2));
		});
	});
})(jQuery);